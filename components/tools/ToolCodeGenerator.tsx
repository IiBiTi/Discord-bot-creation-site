import React, { useState } from 'react';
import { useLanguage } from '../../contexts/LanguageContext';
import { SparklesIcon } from '../icons/SparklesIcon';
import { CopyIcon } from '../icons/CopyIcon';
import { generateEmbedJson } from '../../services/geminiService';
import { DownloadIcon } from '../icons/DownloadIcon';

// Mock functionality for generating and downloading a tool bot
const generateGiveawayBotProject = (customization: string) => {
    // In a real implementation, this would call Gemini with a sophisticated prompt
    // to generate a full file structure based on a giveaway bot template + customizations.
    // For now, we return a mock file structure.
    console.log("Generating giveaway bot with customizations:", customization);

    const readme = `# Giveaway Bot\n\nGenerated by the Discord Bot Generator.\n\nCustomizations:\n- ${customization || 'Default settings'}`;
    const mainJs = `const { Client, GatewayIntentBits, Collection } = require('discord.js');
require('dotenv').config();

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessageReactions] });
client.commands = new Collection();
// Command and event handlers would go here...
console.log('Giveaway bot starting...');
client.login(process.env.BOT_TOKEN);`;
    const startCommand = `const { SlashCommandBuilder } = require('discord.js');
module.exports = {
    data: new SlashCommandBuilder().setName('start-giveaway').setDescription('Starts a new giveaway.'),
    async execute(interaction) {
        // Full giveaway logic here
        await interaction.reply('Giveaway started! ðŸŽ‰');
    }
};`;

    return {
        files: {
            'README.md': readme,
            'index.js': mainJs,
            'commands/start.js': startCommand,
            '.env': 'BOT_TOKEN=YOUR_TOKEN_HERE\nCLIENT_ID=YOUR_CLIENT_ID_HERE'
        },
        download: () => alert('Download functionality would be implemented here.'),
    };
};

export const ToolCodeGenerator: React.FC = () => {
    const { t } = useLanguage();
    const [toolType, setToolType] = useState('giveaway');
    const [customPrompt, setCustomPrompt] = useState('');
    const [generatedResult, setGeneratedResult] = useState<{ files: Record<string, string>, download: () => void } | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [selectedFile, setSelectedFile] = useState<string | null>(null);
    const [copied, setCopied] = useState(false);

    const handleGenerate = async () => {
        setIsLoading(true);
        setGeneratedResult(null);
        // Simulate API call
        await new Promise(res => setTimeout(res, 1500));

        if (toolType === 'giveaway') {
            const result = generateGiveawayBotProject(customPrompt);
            setGeneratedResult(result);
            setSelectedFile('README.md');
        } else {
            // Placeholder for other tools
            alert('This tool generator is not yet implemented.');
        }

        setIsLoading(false);
    };
    
    const handleCopy = () => {
        if (!generatedResult || !selectedFile) return;
        navigator.clipboard.writeText(generatedResult.files[selectedFile]);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
    };

    return (
        <div className="bg-gray-800/50 backdrop-blur-sm rounded-2xl border border-gray-700 shadow-lg animate-fade-in max-w-5xl mx-auto">
            <div className="p-6 border-b border-gray-700">
                <div className="flex items-center gap-4">
                    <SparklesIcon className="w-8 h-8 text-purple-400" />
                    <div>
                        <h2 className="text-2xl font-bold">{t('aiToolGeneratorTitle')}</h2>
                        <p className="text-gray-400 text-sm">{t('aiToolGeneratorSubtitle')}</p>
                    </div>
                </div>
            </div>
            <div className="p-6 space-y-6">
                <div>
                    <label htmlFor="tool-type" className="block text-sm font-medium text-gray-300 mb-2">{t('aiToolSelectTool')}</label>
                    <select
                        id="tool-type"
                        value={toolType}
                        onChange={(e) => setToolType(e.target.value)}
                        className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 focus:ring-2 focus:ring-purple-500 outline-none transition"
                        disabled={isLoading}
                    >
                        <option value="giveaway">{t('aiToolGiveaway')}</option>
                        <option value="poll" disabled>{t('aiToolPoll')} (Coming Soon)</option>
                    </select>
                </div>
                <div>
                    <label htmlFor="ai-prompt" className="block text-sm font-medium text-gray-300 mb-2">{t('aiToolCustomize')}</label>
                    <textarea
                        id="ai-prompt"
                        value={customPrompt}
                        onChange={(e) => setCustomPrompt(e.target.value)}
                        rows={3}
                        className="w-full bg-gray-900 border border-gray-600 rounded-lg px-4 py-2 focus:ring-2 focus:ring-purple-500 outline-none transition"
                        placeholder={t('aiToolPlaceholder')}
                        disabled={isLoading}
                    />
                </div>
                <div className="flex justify-end">
                    <button
                        onClick={handleGenerate}
                        disabled={isLoading}
                        className="flex items-center justify-center gap-2 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-5 rounded-lg transition-colors shadow-md disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        {isLoading ? (
                            <>
                                <svg className="animate-spin -ml-1 rtl:ml-1 ltr:mr-2 rtl:ml-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                {t('generating')}
                            </>
                        ) : (
                            <>
                                <SparklesIcon className="w-5 h-5" />
                                <span>{t('aiToolGenerate')}</span>
                            </>
                        )}
                    </button>
                </div>
                {generatedResult && (
                    <div className="animate-fade-in mt-8">
                         <div className="bg-gray-900/50 rounded-lg border border-gray-700 h-[400px] flex flex-col">
                            {/* Header */}
                             <div className="flex-shrink-0 flex justify-between items-center p-3 bg-gray-800/70 border-b border-gray-700">
                                <div className="flex gap-2 items-center">
                                    {Object.keys(generatedResult.files).map(filename => (
                                        <button 
                                            key={filename}
                                            onClick={() => setSelectedFile(filename)}
                                            className={`px-3 py-1 text-xs rounded-md ${selectedFile === filename ? 'bg-purple-600/30 text-white' : 'text-gray-400 hover:bg-gray-700/50'}`}
                                        >
                                            {filename}
                                        </button>
                                    ))}
                                </div>
                                <button
                                    onClick={handleCopy}
                                    className="p-1.5 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
                                >
                                    {copied ? <span className="text-xs text-green-300">Copied!</span> : <CopyIcon className="w-4 h-4" />}
                                </button>
                            </div>
                            {/* Code */}
                             <div className="flex-grow overflow-auto">
                                <pre className="p-4 whitespace-pre-wrap font-mono text-sm text-gray-300">
                                    <code>{selectedFile ? generatedResult.files[selectedFile] : ''}</code>
                                </pre>
                             </div>
                         </div>
                        <div className="flex justify-center mt-6">
                             <button
                                onClick={generatedResult.download}
                                className="flex items-center justify-center gap-3 bg-gradient-to-r from-purple-600 to-indigo-700 hover:from-purple-700 hover:to-indigo-800 text-white font-bold py-3 px-8 rounded-full shadow-lg transform hover:scale-105 transition-all duration-300 ease-in-out"
                            >
                                <DownloadIcon className="w-6 h-6" />
                                <span>{t('downloadProject')}</span>
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};
